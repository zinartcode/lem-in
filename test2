10
##start
1 1 1
2 1 1
3 1 1
##end
end 1 1
5 1 1
6 1 1
7 1 1
8 1 1
9 1 1
10 1 1
1-2
1-5
2-8
2-3
3-end
5-6
6-7
7-end
8-9
9-10
10-end



void		add_link(t_ants *ants, char *line)
{
	if (valid_link(ants, line) == 1)
	{
		char **link;
		t_room *temp;
		t_link *new;
		// char matrix[ants->room_count][ants->room_count];

		link = ft_strsplit(line, '-');
		temp = ants->rooms;
		while (temp)
		{
			if (ft_strcmp(link[0], temp->name) == 0)
			{
				new = (t_link *)malloc(sizeof(t_link));
				new->name1 = ft_strdup(link[0]);
				new->name2 = ft_strdup(link[1]);
				link_to_room(ants, new);
			}
			temp = temp->next;
		}
		// ft_printf("this is valid link: %s, %s\n", link[0], link[1]);
	}
	else
		ft_error();
}

void	link_to_room(t_ants *ants, t_link *new)
{
	t_link	*add;
	if (ants->rooms->links == NULL)
		ants->rooms->links = new;
	else if (same_link(ants, new) != 1)
	{
		add = ants->rooms->links;
		while (add->next != NULL)
			add = add->next;
		add->next = new;
	}
	else
		ft_error();
}

int		same_link(t_ants *ants, t_link *new)
{
	t_link	*temp;
	int		room1;
	int		room2;

	temp = ants->rooms->links;
	while (temp)
	{
		room1 = 0;
		room2 = 0;
		// ft_printf("in new: %s, %s\n", new->name1, new->name2);
		// ft_printf("in same link: %s, %s\n", temp->name1, temp->name2);
		if (ft_strcmp(new->name1, temp->name1) == 0 || ft_strcmp(new->name1, temp->name2) == 0)
			room1 = 1;
		if (ft_strcmp(new->name2, temp->name2) == 0 || ft_strcmp(new->name2, temp->name1) == 0)
			room2 = 1;
		if (room1 == 1 && room2 == 1)
		return (1);
		temp = temp->next;
	}
	return (0);
}